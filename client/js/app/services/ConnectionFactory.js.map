{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,oBAAMC,SAAS,CAAC,aAAD,CAAf;AACA,oBAAMC,UAAU,CAAhB;AACA,oBAAMC,SAAS,YAAf;;AAEA,oBAAIC,aAAa,IAAjB;AACA,oBAAIC,QAAQ,IAAZ;;AAGA;AAEI,6DAAc;AAAA;;AAEV,sDAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AAEH;;AANL;AAAA;AAAA,gFAQ2B;;AAEnB,uEAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oFAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,4FAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,kHAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,iFAJD;;AAMAR,4FAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oGAAG,CAACf,UAAJ,EAAgB;;AAEZA,6HAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,wHAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,2HAAWC,KAAX,GAAmB,YAAW;;AAE1B,sIAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AAEH,iHAJD;AAMH;AACDE,wGAAQJ,UAAR;AAEH,iFAfD;;AAiBAM,4FAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wGAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uGAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,iFALD;AAOH,iEAlCM,CAAP;AAqCH;AA/CL;AAAA;AAAA,8EAiDyBrB,UAjDzB,EAiDqC;;AAE7BH,uEAAOyB,OAAP,CAAe,iBAAS;;AAEpB,oFAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,2FAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AAEH,iEALD;AAOH;AA1DL;AAAA;AAAA,kFA4D6B;;AAErB,oEAAG5B,UAAH,EAAe;AACXC;AACAD,6FAAa,IAAb;AACH;AAEJ;AAnEL;;AAAA;AAAA;AA4EH,CAtFuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n\r\n            throw new Error('Não é possiível criar instâncias de Coonection Factory');\r\n\r\n        }\r\n\r\n        static getConnection() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n\r\n                    ConnectionFactory._createStores(e.target.result);\r\n\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    if(!connection) {\r\n                    \r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n\r\n                            throw new Error('Voce não pode fechar diretamente a conexão');\r\n\r\n                        };\r\n\r\n                    }\r\n                    resolve(connection);\r\n\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n\r\n                };\r\n\r\n            });\r\n\r\n\r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n\r\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n\r\n            });\r\n\r\n        }\r\n\r\n        static closeConnection() {\r\n\r\n            if(connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n})();"]}