{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACUA,sD,GAAS,CAAC,aAAD,C;AACTC,uD,GAAU,C;AACVC,sD,GAAS,Y;AAEXC,0D,GAAa,I;AACbC,qD,GAAQ,I;;6EAGCC,iB;AAET,6FAAc;AAAA;;AAEV,sFAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AAEH;;;;gHAEsB;;AAEnB,uGAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oHAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4HAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kJAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,iHAJD;;AAMAR,4HAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oIAAG,CAAChB,UAAJ,EAAgB;;AAEZA,6JAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,wJAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,2JAAWC,KAAX,GAAmB,YAAW;;AAE1B,sKAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AAEH,iJAJD;AAMH;AACDE,wIAAQL,UAAR;AAEH,iHAfD;;AAiBAO,4HAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wIAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uIAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,iHALD;AAOH,iGAlCM,CAAP;AAqCH;;;8GAEoBtB,U,EAAY;;AAE7BH,uGAAO0B,OAAP,CAAe,iBAAS;;AAEpB,oHAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACjD1B,2HAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AAEH,iGALD;AAOH;;;kHAEwB;;AAErB,oGAAG7B,UAAH,EAAe;AACXC;AACAD,6HAAa,IAAb;AACH;AAEJ","file":"ConnectionFactory.js","sourcesContent":["\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    let connection = null;\r\n    let close = null;\r\n\r\n\r\n    export class ConnectionFactory {\r\n\r\n        constructor() {\r\n\r\n            throw new Error('Não é possiível criar instâncias de Coonection Factory');\r\n\r\n        }\r\n\r\n        static getConnection() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n\r\n                    ConnectionFactory._createStores(e.target.result);\r\n\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    if(!connection) {\r\n                    \r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n\r\n                            throw new Error('Voce não pode fechar diretamente a conexão');\r\n\r\n                        };\r\n\r\n                    }\r\n                    resolve(connection);\r\n\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n\r\n                };\r\n\r\n            });\r\n\r\n\r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n\r\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n\r\n            });\r\n\r\n        }\r\n\r\n        static closeConnection() {\r\n\r\n            if(connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n"]}