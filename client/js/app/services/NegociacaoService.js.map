{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","resolve","reject","get","map","Date","objeto","data","quantidade","valor","console","log","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        \r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n            ]).then(periodos => {\r\n        \r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n        \r\n            return negociacoes;\r\n        \r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n        \r\n    } \r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possivel obter as negociacoes da semana');\r\n                })\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        \r\n                return new Promise((resolve, reject) => {\r\n        \r\n                    this._http\r\n                        .get('negociacoes/anterior')\r\n                        .then(negociacoes => {\r\n                            resolve(negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                        })\r\n                        .catch(erro => {\r\n                            console.log(erro);\r\n                            reject('Não foi possivel obter as negociacoes da semana anterior');\r\n                        })\r\n        \r\n                });\r\n        \r\n        \r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        \r\n                return new Promise((resolve, reject) => {\r\n        \r\n                    this._http\r\n                        .get('negociacoes/retrasada')\r\n                        .then(negociacoes => {\r\n                            resolve(negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                        })\r\n                        .catch(erro => {\r\n                            console.log(erro);\r\n                            reject('Não foi possivel obter as negociacoes da semana retrasada');\r\n                        })\r\n        \r\n                });\r\n        \r\n        \r\n    }\r\n\r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel adicionar a negociação')\r\n            });\r\n\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error(    'Não foi possivel obter as negociações');\r\n            });\r\n            \r\n        }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel apagar a negociação')\r\n            })\r\n\r\n        }\r\n\r\n\r\n        importa(listaAtual) {\r\n\r\n           return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                \r\n                !listaAtual.some(negociacaoExistente =>\r\n                \r\n                    negociacao.isEquals(negociacaoExistente)))\r\n                )\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possivel buscar negociacoes para impoartar');\r\n                })\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n"]}